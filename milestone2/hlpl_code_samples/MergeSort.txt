~ This is the higher complexity sample program. ~

fix num size := 10.  ~ Global constant ~

(num@ array) => func mergeSort => () [
	~ Iterative merge sort, we're not brave enough for recursion yet ~

	~ Define func merge nested ~
	(num@ array, num start, num mid, num end) => func merge => () [
		~ Only one ID declaration per line. ~
		var num left_size.
		var num right_size.
		var num#left_size left.
		var num#right_size right.
		var num i.
		var num j.
		var num k.
		var num temp.

		~ Initialize values. ~
		left_size := add(sub(mid, start), 1).  ~ mid - start + 1 ~
		right_size := sub(end, mid).  ~ end - mid ~

		i := 0.
		iterif (isGreater(left_size, i)) [
			temp := add(start, i).
			left#i := array#temp.
			i := add(i, 1).
		]

		j := 0.
		iterif (isGreater(right_size, j)) [
			temp := add(add(mid, 1), j).
			right#j := array#temp.
			j := add(j, 1).
		]

		i := 0.
		j := 0.
		k := start.

		iterif (isGreater(left_size, i) & isGreater(right_size, i)) [
			check (isGreater(right#j, left#i)) [
				array#k := left#i.
				i := add(i, 1).
			]
			other [
				array#k := right#j.
				j := add(j ,1).
			]
			k := add(k, 1).
		]

		iterif (isGreater(left_size, i)) [
			array#k := left#i.
			i := add(i ,1).
			k := add(k, 1).
		]
		iterif (isGreater(right_size, j)) [
			array#k := right#j.
			j := add(j ,1).
			k := add(k, 1).
		]
	]  ~ End of func merge ~

	~ Define utility function min nested as well ~
	(num a, num b) => func min => (num) [
		check (isGreater(a, b)) [
			give a.
		]
		other [
			give b.
		]
	]

	~ iterative mergeSort starts here ~
	var num current_size.
	var num start_point.

	current_size := 1.
	
	iterif (isGreater(size, current_size)) [
		start_point := 0.
		iterif (isGreater(sub(size, 1), start_point)) [
			~ Block-scoped variable declarations here ~
			var num a.
			var num b.
			var num mid.
			var num end_point.

			a := add(start_point, sub(current_size, 1)).
			b := sub(size, 1).
			mid := (a, b) => min.
			a := add(start_point, sub(mult(2, current_size), 1)).  ~ The actual expression is start_point+2*current_size-1 ~
			~ b is still size-1 ~
			end_point := (a, b) => min.
			(array, start_point, mid, end_point) => merge.
		]
	]

]

() => entry => () [
	var num#size array.
	var num i.
	i := 0.

	iterif (isGreater(size, i)) [
		array#i := read.
		i := add(i, 1).
	]

	(array) => mergeSort.  ~ Base address of array is given, implicitly ~
]
