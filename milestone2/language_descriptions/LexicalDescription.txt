Notes about some of the notations below:
-	[^'5'] means any character except '5'
-	. means anything, so .* means any number of any character
-	Reserved words are listed, but the process of handling them at the level of the parser is not depicted.

----------------------------|------------------------------|---------------------------------------------------------
  Language Element		RE				Explanation
----------------------------|------------------------------|---------------------------------------------------------

Reserved words			['func' 'entry' 'var'		Class of words that cannot be user-defined identifier.
				'fix' 'num' 'ascii'		Handling: each read lexeme is first checked whether it's a KW,
				'num@' 'ascii@' 'num#'		and only if it's not that we check its token type
				'ascii#' 'give' 'check'
				'other' 'iterif' 'read'
				'write']

User-defined identifiers	( [a-zA-Z] | '_' ) +		Any combination of alphabet and underscores, no digits

Numeric literals		('-'?) [0-9]+			Signed int

Character literals		' .? '				Single character between single quotes (i'm not putting the single quotes themselves between quotes)

String literals			' " ' .* ' " '			Any number of characters between double quotes, for example "hello" or even ""

Operators			['+' '-' '*'			Arithmetic, relational, logical
				 '/' '='
				 '>' ':=',
				 '&' '|' '^']

Punctuation			['.' ',' '#' '('		Delimiters, parentheses, dots, commas, hashes for indexing and arrows for function calls & definitions
				')' '[' ']' '=>']

Comments			'~' .*				~ followed by anything

Whitespace			[' ' \n \t]			Spaces & new lines (EDIT: we should have included tabs and other types of
								whitespace as well, now that I think about it)
----------------------------|-------------------------------|---------------------------------------------------------
