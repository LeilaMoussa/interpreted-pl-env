-------------------------------Syntactic description with EBNF--------------------------------

<program> → {<declaration>} {<function>} <mainFunction>

<declaration> → (<varDeclaration> | <fixDeclaration>) ENDSTAT

<varDeclaration> → VAR_KW <typeSpecifier> <userDefinedIdentifier>

<fixDeclaration> → CONST_KW <typeSpecifier> <userDefinedIdentifier> ASGN (<expression> | <operation> | <functionCall>)

<typeSpecifier> → NUM_KW | CHAR_KW | NUM_ADDR_KW | CHAR_ADDR_KW | NUM_ARR_KW <size> | STRING_KW <size> | ' ' // what's ' ' for?

<size> → <userDefinedIdentifier> | <digit> {<digit>}

<mainFunction> → LPAREN RPAREN ARROW MAIN_KW ARROW LPAREN RPAREN LBRACK {<declaration>} {(<statement> | <function>)} RBRACK

<function> → FUNC_KW LPAREN <parameter> RPAREN ARROW <userDefinedIdentifier> ARROW LPAREN <typeSpecifier> RPAREN LBRACK {<declaration>} {(<statement> | <function>)} RBRACK

<parameter> → <typeSpecifier> <identifier> {COMMA <typeSpecifier> <identifier>}

<statement> → (<assignment> | <return> | <selection> | <loop> | <comment> | <functionCall>) ENDSTAT  // we don't use comment anymore

<assignment> → <userDefinedIdentifier> ASGN (<expression> | <operation> | <functionCall>)  // expression can be operation!!

<return> → RETURN_KW <returnedExpression> ENDSTAT

<returnedExpression> → <expression> | <functionCall>

<selection> → IF_KW LPAREN <conditionStatement> RPAREN LBRACK {<declaration>} {<statement>} RBRACK ELSE_KW LBRACK {<declaration>} {(<statement> | <function>)} RBRACK

<loop> → LOOP_KW LPAREN <conditionStatement> RPAREN LBRACK {<declaration>} {<statement>} RBRACK

<operation> → (ADD | SUB | MULT | DIV) LPAREN <operand> COMMA <operand> RPAREN 

<operand> → <numericLiteral> | <userDefinedIdentifier> | <operation> | <functionCall>

<functionCall> → LPAREN <expression> {COMMA <expression>} RPAREN ARROW <identifier>

<conditionStatement> → [NOT] <comparaison> { (AND | OR ) [NOT] <comparaison>}

<comparison> → (EQ | GT) LPAREN <compared> <compared> RPAREN

<compared> → <numericLiteral> | <userDefinedIdentifier> | <functionCall>

<expression> → CHAR_LIT | STR_LIT | <numericLiteral> | <userDefinedIdentifier> | <operation>

<identifier> → <userDefinedIdentifier> | <reservedWord>

<userDefinedIdentifier> → IDENT [IDX] 

<reservedWord> → IN_KW | OUT_KW

<numericLiteral> → NUM_LIT
